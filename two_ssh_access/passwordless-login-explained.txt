== How-to passwordless login / commits ==

By now you're probably annoyed by repeatedly typing the demo-password again and again
Fortunately, git supports password-less SSH public-key sign-in

Here we'll set this up.

SSH public/private keys mean you have a PRIVATE private key, a secret..
intrinsically, mathematically coupled to this is a PUBLIC public key that you can shout to everyone.
Due to some awesome maths involving prime-factorisation, eliptic curves and computability
you can PROVE that you know the secret private key, without telling the secret, to anyone who has the public key.
(A "zero knowledge proof of identity")

Disclaimer: steps loosely based on:
https://konstantin.blog/2011/howto-remote-shared-git-repository/

== steps ==
1) generate a new ssh keypair (public + private key)
     If you already have keys, you are welcome to specify a non-default file-name to save it to.
     It can make sense to have many keypairs, one pair for each use-case (e.g. one for git, one for login to the department cluster, one for your home-server).
     It is good hygiene to protect your private key with a password; you will only need to enter this ONCE every login session.
        (So that people who sudo into your account (e.g. on the cluster) can't immediately impersonate you on other machines)

  $ cd ~/.ssh
  $ ssh-keygen -t rsa -C "YOURNAME@dkfz-heidelberg.de"
  # Generating public/private rsa key pair.
  # (text omitted)
  # Your public key has been saved in /home/<YOURNAME>/.ssh/id_rsa.pub


2) check your public key:
  (replace with filename you selected above)
  $ cat ~/.ssh/id_rsa.pub

it should say something like
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFAB/6i1cR4TmQRP+BV0vfvQ7VlW29wi/BuRpgyc2iRigHae00IeU4rPa+/RMVKm2y7qZJ0CMGOvr9P7MAzAJAgmsUB72hUdRE0aHGVUsYbq74Dtu0Xd3xEJebFYTGYFSOMxFO/ZtHbD+C8WIuOikhgzDumn7ydy+snmpWsKsVa/ORvXUvDTDRQZjX11vNJh0/7G9oyRh6y5Czkje4mOUtVyo+r+lTyzTr0YKeLrd6sFS34iOZ1CSzc6j5rZT6s5hkV7DUPnLOljjzLxJl6DVmBuKIFR5jCGixw/uyjaA6VimlJ6IyWK48o2rDEfEfImRQfqf0l2xHqvHVQwfpogj5 j.kerssemakers@dkfz-heidelberg.de

(This is my actual public key, set up for this demo; like I said, you can tell the public key to everyone!)


3) tell your PUBLIC key to the server, so that the server can identify you:
For demonstration purposes and recursive-ness fun, the .ssh folder of our demo-host is also under git version control ;-)

$  ssh demo@ulevel
#   <enter password>
$  cd ~/.ssh/
$  vi authorized_keys
#   <add the entire contents of your id_rsa_<YOURSTUFF>.pub to a new line in this file
#   Make sure it starts with "ssh-rsa",
#   if it starts with "----- BEGIN RSA PRIVATE KEY -----", it's the secret one! NEVER EVER EVER NEVER share this
#     (Sharing your secret key is like giving away your wallet, house-key, passport and bank-account login: instant Identity theft!)

$ git commit -am "add SSH authorized key for <<MYNAME>>"


4) logout / ctrl+d

5) retry a `git pull`, do you still have to enter the password?
