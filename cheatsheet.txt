== List of useful git commands ==
A cheat-sheet to keep under your pillow / tape to your wall

=== git help SUBCOMMAND ===
Opens the man-page of the subcommand.
If subcommand is empty, shows the possible subcommands.

=== git init ===
Start a new, virgin repo in any folder.
git init save/commit/do anything yet, it just creates the blank sheet of 'paper' to start writing on.

The folder can either be a new one you just made with mkdir, or a project folder that has a bazillion little files.
(A lot of my workspaces have a first commit that reads "Time to (finally) bring this under version control", which adds a few dozens files.)

=== git status ===
answers "Where  was I?"
it shows:
- which files/folders have "untracked changes" (stuff git doesn't care about yet)
- which files/folders have "unstaged changes"  (files under version control, with changes, but not yet scheduled to commit)
- which files/folders have "staged changes"    (changes that will be commited the next time you do "git commit"
- how up-to-date you are, compared to the "upstream" server (usually named "origin"): commits only you have, and commits only they have.


=== git clone OTHER_REPO ===
Make a local copy of OTHER_REPO.
OTHER_REPO can be:
- a ssh location: user@host:/path/to/repo_root
- a http location: https://github.com/juleskers/git-playground
- a local directory: ../../other_project

Git will remember which OTHER_REPO you cloned, and keep a reference to it under name "origin"


=== git fetch ===
Get all the latest changes from OTHER_REPO "origin", but keep the current state unchanged.
This gets all the changes and new branches from upstream, so that you can look at them when you want.


=== git pull ===
Update the currently checked-out branch with the latest changes from OTHER_REPO "origin",
and checkout the new state if there are no conflicting changes.


=== git add files... ===
Tells git to start caring about a file and it's changes.
In effect, it "stages" the changes in the file(s), telling git "next time I'm making a commit, include these changes"
For files with changes (tracked, "modified files"), all changes are staged (for staging sub-sets of a file, see `git gui`, and `git add --interactive`)

`git add`-ing "Untracked" (new) files has the side-effect that git will _keep_ caring about the file in the future

=== git rm ===
throw it in the trash, just like normal `rm`
With the added benefit that git will display it more nicely.
Rule of thumb: never use the "normal" `rm` in a git-controlled directory, always `git rm`

The deletion is performed, and staged, but not yet committed;
Probably other files need to be updated to handle the suddenly-missing files; also make the necessary changes,
and then do a single commit of removed-file + all required fixes.


=== git commit ===
Actually save the staged changes. Like Ctrl+S / Save as..
Until you have typed this, your "index" (staged changes) are flexible, changeable, like soft clay.
`git commit` bakes this soft clay into a hard piece of stone, that will survive for two-thousand years, 
just like those clay tablets from Mesopotamia.

Options:
-a : shortcut to add all "tracked" files with changes, saves you having to type "git add" before every commit. 
     Untracked (new) files are ignored by this shortcut, use a full `git add` for them
-m : shortcut to type the commit message on the command line. Useful for shorter messages
     if you leave it out, git will open your $EDITOR for you, to type a proper commit message.

=== git log ===
list the history of your repository, from right-now all the way back to the birth-times.

(like "Gimli son of Glóin son of Gróin son of Farin son of Borin son of Nain II 
son of Óin son of Glóin son of Thorin I son of Thráin son of Náin I son of Durin VI 
son of Durin the Deathless, First of the Seven Fathers of Dwarves")

=== git checkout [GIT_REF] ===
"opens" the specified state.
A GIT_REF is either a branch-name, a commit ID, or a relative indicator (e.g. "HEAD^^^": the commit three steps before the current position)
If GIT_REF is empty, checks out the current state, i.e. (mostly) a no-op, but see -b.

Options:
-b NEW_BRANCH_NAME: checkout the specified GIT_REF (which may be empty, i.e. "the current state"), and
     start a new branch called "NEW_BRANCH_NAME" at that point, and switch to it.
     useful to start a new branch, e.g. `git checkout -b my-new-branch-to-test-something-real-quick`

Special behaviour:
`git checkout file-with-staged-changes` un-stages the changes; the file will not be changed, but git will remove the changes from its
"include this in next commit" list (a.k.a the "index").

=== git branch ===
without any further options, just lists all the available branches.

Options:
-d BRANCH_NAME... : delete the specified branch(es). Be careful you don't throw anything away that wasn't merged yet.

=== git gui ===
Opens a graphical interface, allowing you to stage/unstage/commit in more detail.
The gui allows you to select entire blocks (called "hunks") of changes, or single lines at a time.
staged changes can be unstaged in the same way
Very useful if you did multiple things in one go, but want to save them as separate commits
(e.g. a new feature, and a related bugfix in the old code you were re-using.)

=== gitk ===
(separate package, needs to be installed explicitly)
opens a visual tree-view showing how all the branches are related to eachother.

=== git merge OTHER_BRANCH ===
Joins two branches together.

Repeats the changes from OTHER_BRANCH on the currently checked out branch.
All the changes from the other branch will be plonked in as one big, combined change.
Both branches must share some common point in history somewhere in their past. (i.e. you can't merge in a completely different project)

WARNING: to prevent head-aches and non-undo-able changes, ALWAYS make sure you have a clean working directory before doing a merge.
(i.e. do a final pre-merge commit, make sure you have no uncommitted changes with `git status`, and only then do `git merge`)

Options:
--ff-only : attempt a "fast-forward": only repeat the changes if one of the branches hasn't changed since the diverging point.
  This effectively makes a branch-identifier somewhere earlier in (non-diverging) history point at the current situation, without adding any changes.

=== git rebase OTHERBRANCH ===
repeats the changes in the currently checked-out branch on top of the changes in UPSTREAM.
This allows you to pretend your work happened 'after' work on OTHERBRANCH, instead of in parallel to it.
Using this regularly in between your work means you have easier merges at the end, and sometimes even removes the need for merges entirely.

Extracted from the git-help:
Goes from this:
                     A---B---C <= CURRENT_BRANCH
                    /
               D---E---F---G <= OTHERBRANCH
to this:
                             A'--B'--C' <= CURRENT_BRANCH
                            /
               D---E---F---G <= OTHERBRANCH

=== git reset PREVIOUS_STATE ===
Undoes history, pretending that everything since commit PREVIOUS_STATE has never been commited.
The files themselves will not change, git will just forget all the changes, so that you can re-commit them.

WARNING: Never do this on changes you have already shared with others (`git push`, others doing `git pull` on you).
As with all forms of time-travel, everyone involved quickly gets headaches if their versions of history doesn't add up.
(It's possible, but requires very careful communication and coordination with all other copies.
This added effort is usually not worth it, just do a normal merge instead.)

Options:
--hard : DANGEROUS: git reverts all files to state PREVIOUS_STATE, throwing away EVERYTHING else.
         You usually don't want this, so think again what you are doing.
         This option WILL throw away your work, both saved and unsaved changes, regardless of committed or not.
         so be very CAREFUL to always have a clean working directory before you use this.
         (even if it is just `git commit -am "save everything before doing a reset, fingers crossed..."


=== ADVANCED: git reflog ===
The secret history of git: all previous commits, including obsolete ones like the state before a reset, or the non-rebased versions of a rebase.
Unless you KNOW what you are doing, toying with this will ruin your day.
The reflog allows git guru's to recover your precious work after you messed with the wrong merge, rebase or reset switches.
